from typing import Protocol, Iterator, Literal

class Insertable(Protocol):
    def insert(self, key: any, value: any, **args): ...

class Searchable(Protocol):
    def search(self, key: any) -> any: ... # only value
    def search_record(self, key: any) -> any: ... # all record
    def exist(self, key: any) -> bool: ...
    
class Deletable(Protocol):
    def delete(self, key: any) -> any: ...
    def delete_all(self, key: any) -> any: ...
    
class Updatable(Protocol):
    def update(self, key: any) -> bool: ...
    
class RangeSearchable(Protocol):
    def range_search(self, range_query) -> any: ...
    def range_count(self, start_key: any, end_key: any) -> int: ...
    
class FullTextSearchable(Protocol):
    def search_text(self, text: str, limit: int | None = None) -> any: ...
    def search_prefix(self, prefix: str, limit: int | None = None) -> any: ...
    
class Iterable(Protocol):
    def get_all_keys(self) -> list[any]: ...
    def get_all_records(self) -> list[any]: ...
    def keys(self) -> Iterator[any]: ...
    def values(self) -> Iterator[any]: ...
    def items(self) -> Iterator[tuple[any, any]]: ...
    
class Sortable(Protocol):
    def get_sorted_keys(self, order: Literal["ASC", "DESC"], limit: int | None = None): ...
    def get_sorted_records(self, order = Literal["ASC", "DESC"], limit: int | None = None): ...
    